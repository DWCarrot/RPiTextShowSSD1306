use std::fmt;
use std::fmt::Debug;
use std::fmt::Display;
use std::string::FromUtf8Error;
use std::mem;

use crate::contents::Pages;

const NUL: u8 = 0x00;
const SOH: u8 = 0x01;
const EOT: u8 = 0x04;
const STX: u8 = 0x02;
const ETX: u8 = 0x03;
const FL: u8 = 0x0A;
const FF: u8 = 0x0C;
const ENQ: u8 = 0x05;
const DEL: u8 = 0x7F;

const STATE_INIT: u32 = 0x00;
const STATE_START: u32 = 0x01;
const STATE_PAGESET: u32 = 0x02;
const STATE_LINESET: u32 = 0x04;
const STATE_TEXT: u32 = 0x08;

fn in_state(state: u32, filter: u32) -> bool {
    state | filter == filter
}

/**
 *
 */

pub struct Cursor {
    cur_page: usize,
    cur_line: usize,
}

impl Cursor {
    pub fn new() -> Cursor {
        Cursor {
            cur_page: 0,
            cur_line: 0,
        }
    }
}

/**
 *
 */

pub enum Operation {
    SelectLine(usize),
    SelectPage(usize),
    SetText(String),
    DeleteLine,
    DeletePage,
    Clear,
}

impl Operation {
    pub fn operate<'a>(
        self,
        pages: &'a mut Pages,
        cursor: &'a mut Cursor,
    ) -> Result<(), OperationError> {
        match self {
            Self::Clear => {
                pages.clear();
                cursor.cur_line = 0;
                cursor.cur_page = 0;
            }
            Self::DeleteLine => {
                let line_num = pages.get_line_num();
                let page_count = pages.get_page_count();
                if !pages.set(cursor.cur_page, cursor.cur_page, String::default()) {
                    return Err(check_bound(line_num, page_count, cursor));
                }
            }
            Self::DeletePage => {
                if !pages.remove(cursor.cur_page) {
                    return Err(OperationError::InvalidPage(cursor.cur_page));
                }
            }
            Self::SelectPage(page) => {
                if pages.get_page_count() <= page {
                    return Err(OperationError::InvalidPage(page));
                }
                cursor.cur_page = page;
            }
            Self::SelectLine(line) => {
                if pages.get_line_num() < line {
                    return Err(OperationError::InvalidLine(line));
                }
                cursor.cur_line = line;
            }
            Self::SetText(text) => {
                let line_num = pages.get_line_num();
                let page_count = pages.get_page_count();
                if !pages.set(cursor.cur_page, cursor.cur_line, text) {
                    return Err(check_bound(line_num, page_count, cursor));
                }
            }
        }

        Ok(())
    }
}

fn check_bound<'a>(line_num: usize, page_count: usize, cursor: &'a Cursor) -> OperationError {
    if cursor.cur_line >= line_num {
        OperationError::InvalidLine(cursor.cur_line)
    } else {
        OperationError::InvalidPage(cursor.cur_page)
    }
}

#[derive(Debug)]
pub enum OperationError {
    InvalidLine(usize),
    InvalidPage(usize),
    TooLongText(usize),
}

impl Display for OperationError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl std::error::Error for OperationError {}

/**
 *
 */

pub fn parse<'a, I>(utf8data: &'a mut I) -> Result<Vec<Operation>, ParseError>
where
    I: Iterator<Item = &'a u8>,
{
    let mut ops = Vec::new();
    let v = *(utf8data.next().ok_or(ParseError::Empty)?);
    let mut status = STATE_INIT;
    if SOH == v {
        let mut buf = Vec::new();
        status |= STATE_START;
        while let Some(v) = utf8data.next() {
            let v = *v;
            match v {
                FF => {
                    if in_state(status, STATE_TEXT) {
                    } else {
                        let page = *(utf8data.next().ok_or(ParseError::Empty)?);
                        ops.push(Operation::SelectPage(page as usize));
                        status |= STATE_PAGESET;
                    }
                }
                FL => {
                    if in_state(status, STATE_TEXT) {
                    } else {
                        let line = *(utf8data.next().ok_or(ParseError::Empty)?);
                        ops.push(Operation::SelectLine(line as usize));
                        status |= STATE_LINESET;
                    }
                }
                STX => {
                    status |= STATE_TEXT;
                    buf.clear();
                }
                ETX => {
                    let tmp = mem::take(&mut buf);
                    let text = String::from_utf8(tmp).map_err(|e| ParseError::NotUTF8Text(e))?;
                    ops.push(Operation::SetText(text));
                    status &= !STATE_TEXT;
                }
                DEL => {
                    if in_state(status, STATE_TEXT) {

                    } else {
                        if in_state(status, STATE_PAGESET) {
                            if in_state(status, STATE_LINESET) {
                                ops.push(Operation::DeleteLine);
                            } else {
                                ops.push(Operation::DeletePage);
                            }
                        } else {
                            ops.push(Operation::Clear);
                        }
                    }
                }
                _ => {}
            }
            if in_state(status, STATE_TEXT) {
                buf.push(v);
                continue;
            }
            return Err(ParseError::Empty);
        }
    } else {
        // raw txt
        let mut buf = vec![v];
        buf.extend(utf8data);
        let text = String::from_utf8(buf).map_err(|e| ParseError::NotUTF8Text(e))?;
        ops.push(Operation::SetText(text));
    }
    Ok(ops)
}

pub enum ParseError {
    Empty,
    NotUTF8Text(FromUtf8Error),
    UnExpectedEnd,
}
